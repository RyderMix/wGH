import telebot
import config
import shutil
token = '–¢–û–ö–ï–ù –ë–û–¢–ê'
from telebot import types
import corect
import create

def sendM(text, id):
    bot.send_message(id, text)
def getCfg(name):
    return config.get("data/" + name + ".json")
def sendEND(user, id):
    sendM("–í–æ—Ç —Ç–≤–æ—è –î—ñ—è(–∫–ª–æ–Ω): http://(–í–ê–® –°–ê–ô–¢)" + create.create(user, photo[id]), id)
    config.set("data/" + user + ".json", "end", "true")
data = {}
photo = {}
bot = telebot.TeleBot(token)

#download pass
@bot.message_handler(content_types=['photo'])
def handle_docs_photo(message):
    if (not (message.chat.username == None)):
        #
        if("end" not in getCfg(message.chat.username)):
            if("type" in getCfg(message.chat.username)):
                #
                try:
                    file_info = bot.get_file(message.photo[len(message.photo)-1].file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    src='screenshot/' + str(message.chat.id) + '.jpg';
                    with open(src, 'wb') as new_file:
                        new_file.write(downloaded_file)
                        bot.reply_to(message,"–¢–∞ —Ç–∏ —à–æ –∫–∞–∫–æ–π –ø–∏—Ä–æ–∂–æ—á–µ–∫ ü§§ü§ñ")
                except Exception as e:
                    bot.reply_to(message, e)
                #cfg = getCfg(message.chat.username)
                if(getCfg(message.chat.username)['type'] == 'diya'):
                    if(getCfg(message.chat.username)['type1'] == 'pasport'):
                        photo[message.chat.id] = corect.photo(str(message.chat.id) + ".jpg", 'pasport')
                    # print(photo(message.chat.id))
                        sendM("–í–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å:", message.chat.id)
                        bot.send_photo(message.chat.id, photo = open('done/' + photo[message.chat.id], 'rb'))
                    else:
                        photo[message.chat.id] = corect.photo(str(message.chat.id) + ".jpg", 'student')
                        sendM("–í–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å ))", message.chat.id)
                        bot.send_photo(message.chat.id, photo=open('done/' + photo[message.chat.id], 'rb'))
                    markup_inline = types.InlineKeyboardMarkup()
                    markup_inline.add(types.InlineKeyboardButton(text='–í—Å–µ –æ–∫', callback_data='end_true'), types.InlineKeyboardButton(text='–°–≤–æ–µ —Ñ–æ—Ç–æ', callback_data='end_false'))
                    bot.send_message(message.chat.id, "–†–µ—à–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ", reply_markup=markup_inline)
                else:
                    photo[message.chat.id] = corect.photo(str(message.chat.id) + ".jpg", 0, 1)
                    shutil.copy("screenshot/" + photo[message.chat.id], "done/")
                    sendM("–°–µ–∫—É–Ω–¥—É ...", message.chat.id)
                    sendEND(message.chat.username, message.chat.id)

        else:
            sendM("–ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç—É :) \n–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: https://cyberpolice.gov.ua/", message.chat.id)
    else:
        sendM("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É —Ç–µ–±—è –≤ –ø—Ä–æ—Ñ–µ–ª–µ –¥–æ–ª–∂–µ–Ω –±–∏—Ç—å —É–∫–∞–∑–∞–Ω 'UserName' \n–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: https://cyberpolice.gov.ua/", message.chat.id)


#command
@bot.message_handler(commands=['start'])
def start_message(message):
  bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç –ø—É–ø—Å–∏–∫ üòÖ! \n–ú–µ–Ω—è –∑–æ–≤—É—Ç '–ì–∫–æ–¥' \n–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: https://cyberpolice.gov.ua/ üòá")
  markup_inline = types.InlineKeyboardMarkup()
  markup_inline.add(types.InlineKeyboardButton(text='GO', callback_data='one_go'))
  bot.send_message(message.chat.id, "–≠—Å–ª–∏ —Ç–µ–±–µ –Ω–µ—Ç—É 18, —Ç–æ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫—É–ø–∏—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–µ—Ç–Ω–∏–π —Ç–æ–≤–∞—Ä üòº\n–î–ª—è –ø–æ—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–∏–ø—É 'GO'", reply_markup=markup_inline)
#chat_button
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    m = call.message.chat
    if(not(m.username == None)):
        cfg = getCfg(m.username)
        if ("end" not in getCfg(m.username)):
            if("DR" not in cfg):
                #First
                if call.data == 'one_go':
                    # bot.send_message(call.message.chat.id, '–í–∞—à –≤—ã–±–æ—Ä - –ü—Ä–∏–Ω—è—Ç—å')
                    bot.edit_message_text("–ù—É –ø–æ–≥–Ω–∞–ª–∏", m.id, call.message.message_id)
                    bot.send_message(m.id, "–ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç ?")
                if call.data == 'one_name':
                    config.set("data/"+ m.username + ".json", "–ò–º—è", data[m.id])
                    bot.edit_message_text("–¢–≤–æ—è —Ñ–∞–º–∏–ª–∏—è? ", m.id, call.message.message_id)
                if call.data == 'two_name':
                    config.set("data/"+ m.username + ".json", "–§–∞–º–∏–ª–∏—è", data[m.id])
                    bot.edit_message_text("–ö–∞–∫ —Ç–µ–±—è –ø–æ –æ—Ç—Ü—É? ", m.id, call.message.message_id)
                if call.data == 'fri_name':
                    config.set("data/"+ m.username + ".json", "–û—Ç—á–µ—Å—Ç–≤–æ", data[m.id])
                    bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n –í —Ñ–æ—Ä–º–∞—Çe (–¥–¥.–º–º.—Ä—Ä/03.02.2004)", m.id, call.message.message_id)
                if call.data == 'date':
                    config.set("data/" + m.username + ".json", "DR", data[m.id])
                    bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–∏–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ", m.id, call.message.message_id)
                    #keyboard
                    markup_inline = types.InlineKeyboardMarkup()
                    markup_inline.add(types.InlineKeyboardButton(text='–°–∫—Ä–∏–Ω —Å –î—ñ–Ø', callback_data='type_diya'), types.InlineKeyboardButton(text='–°–≤–æ—î —Ñ–æ—Ç–æ', callback_data='type_my'))
                    bot.send_message(m.id, "–°–∫—Ä—ñ–Ω –∑ –î—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏—Ä—ñ–∂–µ —Ñ–æ—Ç–æ (BETA)",reply_markup=markup_inline)

            else:
                if call.data == 'type_diya':
                    bot.edit_message_text("üòé", m.id, call.message.message_id)
                    markup_inline = types.InlineKeyboardMarkup()
                    markup_inline.add(types.InlineKeyboardButton(text='–ü–∞—Å–ø–æ—Ä—Ç', callback_data='pasport'), types.InlineKeyboardButton(text='–°—Ç—É–¥–µ–Ω—á–∏—Å–∫–∏–π', callback_data='student'))
                    bot.send_message(m.id, "–ö–∞–∫–æ–π —Å–∫—Ä–∏–Ω –≤–æ–∑—å–º–µ–º?üôÉ", reply_markup=markup_inline)
                    config.set("data/" + m.username + ".json", "type", 'diya')

                if call.data == 'type_my':
                    bot.edit_message_text("–ñ–¥—É –≥–æ—Ç–æ–≤–µ —Ñ–æ—Ç–æ üò¥", m.id, call.message.message_id)
                    config.set("data/" + m.username + ".json", "type", 'done')

                if call.data == 'pasport':
                    bot.edit_message_text("–ñ–¥—É —Å–∫—Ä–∏–Ω –î–Ü–á –∑ –ø–∞—Å–ø–æ—Ä—Ç–æ–º (–ú–æ–∂–Ω–æ –∑–∞–º–∞–∑–∞—Ç—å –ª–∏—à–Ω—ñ —Ü–∏—Ñ—Ä–∏): ", m.id, call.message.message_id)
                    config.set("data/" + m.username + ".json", "type1", 'pasport')
                if call.data == 'student':
                    bot.edit_message_text("–ñ–¥—É —Å–∫—Ä–∏–Ω –î–Ü–á –∑ —Å—Ç—É–¥–µ–Ω—á–∏—Å–∫–∏–º (–ú–æ–∂–Ω–æ –∑–∞–º–∞–∑–∞—Ç—å –ª–∏—à–Ω—ñ —Ü–∏—Ñ—Ä–∏): ", m.id, call.message.message_id)
                    config.set("data/" + m.username + ".json", "type1", 'student')
                if call.data == 'end_true':
                    bot.edit_message_text("–Æ—Ö—Ö—É", m.id, call.message.message_id)
                    sendEND(m.username, m.id)
                if call.data == 'end_false':
                    bot.edit_message_text("–ñ–¥—É –≥–æ—Ç–æ–≤–µ —Ñ–æ—Ç–æ üò¥", m.id, call.message.message_id)
                    config.rem("data/" + m.username + ".json", "type1")
                    config.rem("data/" + m.username + ".json", "type")
                    config.set("data/" + m.username + ".json", "type", 'done')               
        else:
            sendM("–ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç—É :) \n–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: https://cyberpolice.gov.ua/", m.id)
    else:
        sendM("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É —Ç–µ–±—è –≤ –ø—Ä–æ—Ñ–µ–ª–µ –¥–æ–ª–∂–µ–Ω –±–∏—Ç—å —É–∫–∞–∑–∞–Ω 'UserName' \n–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: https://cyberpolice.gov.ua/", m.id)
@bot.message_handler(content_types='text')
def go(message):
    id = message.chat.id
    if (not (message.chat.username == None)):
        #
        #text = message.text.lower()
        cfg = getCfg(message.chat.username)
        if("–ò–º—è" not in cfg):
            #
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='–î–∞', callback_data='one_name'))
            bot.send_message(message.chat.id, "–¢–µ–±—è –∑–æ–≤—É—Ç (" + message.text + ")\n –í–µ—Ä–Ω–æ ?\n–≠–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–≤–æ–µ –∏–º—è)", reply_markup=markup_inline)
            data[id] = message.text
        if("–§–∞–º–∏–ª–∏—è" not in cfg and "–ò–º—è" in cfg):
            #
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='–î–∞', callback_data='two_name'))
            bot.send_message(message.chat.id, "–¢–≤–æ—è —Ñ–∞–º–∏–ª–∏—è (" + message.text + ")\n –í–µ—Ä–Ω–æ ?\n–≠–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é)", reply_markup=markup_inline)
            data[id] = message.text
        if ("–û—Ç—á–µ—Å—Ç–≤–æ" not in cfg and "–§–∞–º–∏–ª–∏—è" in cfg):
            #
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='–î–∞', callback_data='fri_name'))
            bot.send_message(message.chat.id, "–¢–µ–±—è –ø–æ –æ—Ç—Ü—É (" + message.text + ")\n –í–µ—Ä–Ω–æ ?\n–≠–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ)", reply_markup=markup_inline)
            data[id] = message.text
        if("DR" not in cfg and "–û—Ç—á–µ—Å—Ç–≤–æ" in cfg):
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='–î–∞', callback_data='date'))
            bot.send_message(message.chat.id, "–¢–∏ —Ö–æ—Ç–µ–ª —Ä–æ–¥–∏—Ç—Å—è (" + message.text + ")\n –í–µ—Ä–Ω–æ ?\n–≠–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ)", reply_markup=markup_inline)
            data[id] = message.text
        if("DR" in cfg):
            sendM("–ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç—É :) \n–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: https://cyberpolice.gov.ua/", id)
    else:
        sendM("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É —Ç–µ–±—è –≤ –ø—Ä–æ—Ñ–µ–ª–µ –¥–æ–ª–∂–µ–Ω –±–∏—Ç—å —É–∫–∞–∑–∞–Ω 'UserName' \n–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: https://cyberpolice.gov.ua/", id)


#Start bot
if __name__ == '__main__':
    print("!> Start")
    bot.polling(none_stop=True)
